- name: Create users on all nodes
  hosts: computes,logins
  gather_facts: false
    #strategy: free
  tasks:
          - name: Create groups on nodes
            ansible.builtin.group:
                    name: "{{ item.name }}"
                    gid: "{{ item.gid }}"
            loop: "{{ hostvars.localhost.projects }}"
              #no_log: true
          - name: Create user groups on nodes
            ansible.builtin.group:
                    name: "{{ item.username }}"
                    gid: "{{ item.uid }}"
            loop: "{{ hostvars.localhost.users }}"
              #no_log: true
          - name: Create users on nodes
            ansible.builtin.user:
                    name: "{{ item.username }}"
                    uid: "{{ item.uid }}"
                    password: '*'
                    update_password: on_create
                    group: "{{ item.username }}"
                    groups: "{{ item.projects | map(attribute='name') + (supplementary_groups | default([])) | list }}"
                    create_home: false
                    home: "/home/{{ item.username }}"
            loop: "{{ hostvars.localhost.users }}"
              #no_log: true
          - name: Add users to subuid file
            ansible.builtin.lineinfile:
              line: "{{ item.uid }}:100000:65536"
              path: /etc/subuid
              regexp: "^{{ item.uid }}:"
            loop: "{{ hostvars.localhost.users }}"
              #no_log: true
          - name: Add users to subgid file
            ansible.builtin.lineinfile:
              line: "{{ item.uid }}:100000:65536"
              path: /etc/subgid
              regexp: "^{{ item.uid }}:"
            loop: "{{ hostvars.localhost.users }}"
              #no_log: true

- name: Create users home and its content
  hosts: localhost
  gather_facts: false
  connection: local
  tasks:
          - name: Create home dir
            ansible.builtin.file:
                    path: "/home/{{ item.username }}/.ssh/"
                    owner: "{{ item.username }}"
                    group: "{{ item.username }}"
                    state: directory
            loop: "{{ hostvars.localhost.users }}"
              #no_log: true
            register: home_created
          - name: Configure home at creation
            block:
                    - name: Copy skel directory
                      ansible.builtin.copy:
                              src: "/etc/skel/"
                              dest: "/home/{{ item.username }}/"
                              owner: "{{ item.username }}"
                              group: "{{ item.username }}"
                              force: False
                      loop: "{{ hostvars.localhost.users }}"
                        #no_log: true
                    - name: Generate juliet ssh key
                      community.crypto.openssh_keypair:
                              path: "/home/{{ item.username }}/.ssh/id_ed25519"
                              type: ed25519
                              owner: "{{ item.username }}"
                              group: "{{ item.username }}"
                              mode: "600"
                              comment: "Auto-generated key to connect to Juliet nodes"
                      loop: "{{ hostvars.localhost.users }}"
                        #no_log: true
                      register: keys_creation
                    - name: Add the generated ssh key as authorized
                      ansible.posix.authorized_key:
                              user: "{{ item.item.username }}"
                              key: "{{ item.public_key }}"
                              comment: "Public key to connect from Juliet nodes"
                      loop: "{{ keys_creation.results }}"
                        #no_log: true
            when: home_created.changed

- name: Synchronize ssh keys
  hosts: localhost
  gather_facts: false
  connection: local
  tasks:
          - name: Add the mesonet ssh keys
            ansible.posix.authorized_key:
                    user: "{{ item.0.username }}"
                    key: "{{ item.1.pub }} {{ item.1.name }}"
            loop: "{{ hostvars.localhost.users | subelements('sshkeys') }}"
              #no_log: true
            when: not item.1.rvk
            ignore_errors: true
          - name: Remove the revoked mesonet ssh keys
            ansible.posix.authorized_key:
                    user: "{{ item.0.username }}"
                    key: "{{ item.1.pub }}"
                    state: absent
            loop: "{{ hostvars.localhost.users | subelements('sshkeys') }}"
              #no_log: true
            when: item.1.rvk
            failed_when: false

